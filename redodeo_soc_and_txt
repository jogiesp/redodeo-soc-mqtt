// Intervall in Millisekunden (5 Minuten)
const interval = 5 * 60 * 1000;

// Datenpunkte
const socDP = '0_userdata.0.solar.redodeo_soc';
const socTextDP = '0_userdata.0.solar.Redodeo.soc_schwelwert.soc_text';
const voltageDP = '0_userdata.0.solar.redodeo_single_volt';

// Angepasste Spannung-SOC Kurve (Redodo 12V LiFePO4, Ruhespannung)
const socCurve = [
    { voltage: 14.4, soc: 100 },
    { voltage: 13.8, soc: 100 },
    { voltage: 13.6, soc: 99 },
    { voltage: 13.4, soc: 90 },
    { voltage: 13.28, soc: 80 },
    { voltage: 13.2, soc: 70 },
    { voltage: 13.1, soc: 60 },
    { voltage: 13.0, soc: 50 },
    { voltage: 12.9, soc: 40 },
    { voltage: 12.8, soc: 30 },
    { voltage: 12.6, soc: 10 },
    { voltage: 12.0, soc: 10 },
    { voltage: 10.0, soc: 0 }
];

// Hilfsfunktion für Textstatus
function socToText(soc) {
    if (soc >= 90) return "Voll";
    if (soc >= 70) return "Hoch";
    if (soc >= 30) return "Mittel";
    if (soc >= 10) return "Niedrig";
    return "Leer";
}

// Interpolationsfunktion
function interpolateSOC(voltage) {
    for (let i = 0; i < socCurve.length - 1; i++) {
        const high = socCurve[i];
        const low = socCurve[i + 1];
        if (voltage >= low.voltage && voltage <= high.voltage) {
            const soc = low.soc + (high.soc - low.soc) * (voltage - low.voltage) / (high.voltage - low.voltage);
            return Math.round(soc);
        }
    }
    if (voltage > socCurve[0].voltage) return 100;
    if (voltage < socCurve[socCurve.length - 1].voltage) return 0;
    return null;
}

// Prüfen und anlegen der Datenpunkte
if (!existsState(socDP)) {
    createState(socDP, 0, { type: 'number', name: 'SOC Redodo Batterie', unit: '%', read: true, write: true });
}
if (!existsState(socTextDP)) {
    createState(socTextDP, "Unbekannt", { type: 'string', name: 'SOC Textstatus', read: true, write: true });
}

// Hauptfunktion
function updateSOC() {
    const voltageState = getState(voltageDP);
    if (!voltageState || voltageState.val === null || voltageState.val === undefined) return;

    const voltage = parseFloat(voltageState.val);
    if (isNaN(voltage)) return;

    const soc = interpolateSOC(voltage);
    if (soc !== null) {
        setState(socDP, soc);

        // Textstatus setzen
        const text = socToText(soc);
        setState(socTextDP, text);
    }
}

// Initialer Aufruf
updateSOC();

// Timer setzen, alle 5 Minuten erneut ausführen
setInterval(updateSOC, interval);
